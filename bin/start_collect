#!/usr/bin/env python
# -*- coding: utf-8 -*-

import os

from tornado.httpserver import HTTPServer
from tornado.ioloop import IOLoop
import tornado.options
from tornado.options import options, define

define("address", default="localhost", help="run on the given address")
define("port", default=8888, help="run on the given port", type=int)
define("dir", help="dir with api definitions", default="a")
define("debug", help="", default=False, type=bool)
define("application_data", help="Application data file",
       default="application.json")
define("num_processes", help="Number of child processes", default=1, type=int)
base = os.path.dirname(os.path.abspath( __file__ ))
my_path = os.path.join(base, "../restcollector","collector.py")
define("custom_provider", help="Custom response provider", default=my_path)


def command_line_options():
    tornado.options.parse_command_line()

    if options.dir is None:
        print("!! Specify API directory (--dir=/directory/for/api)\n")
        tornado.options.print_help()
        return False
    elif not options.dir.endswith(os.path.sep):
        options.dir = "%s%s" % (options.dir, os.path.sep)

    if not os.path.exists(options.dir):
        print("Error: Directory: '%s' doesn't exists" % options.dir)
        return False

    return True




from mock_server.application import Application
app = Application(options.port, options.address,
                  options.dir, options.debug, options.application_data,
                  options.custom_provider)
print(u"Serving on %s:%s.." % (options.address, options.port))

server = HTTPServer(app)
server.bind(options.port, options.address)
server.start(options.num_processes)
IOLoop.instance().start()
